/* 
{{.AutogeneratedNotice}}

*/
package {{.PackageName}}

import (
	"{{.WeaviatePackage}}/weaviate"
)

// Client wraps the Weaviate client and provides access to CRUD operations
type Client struct {
	client *weaviate.Client
	tenant      string
	consistency string

}

func (c *Client) creator(className string, id strfmt.UUID) *data.Creator {
	return c.Client.Data().Creator().
		WithClassName(className).
		WithID(id.String()).
		WithTenant(c.tenant).
		WithConsistencyLevel(c.consistency)
}

func (c *Client) getter(className string, id strfmt.UUID) *data.ObjectsGetter {
	return c.Client.Data().ObjectsGetter().
		WithClassName(className).
		WithID(id.String()).
		WithLimit(1).
		WithTenant(c.tenant)
}

func (c *Client) updater(className string, id strfmt.UUID) *data.Updater {
	return c.Client.Data().Updater().
		WithClassName(className).
		WithID(id.String()).
		WithTenant(c.tenant).
		WithConsistencyLevel(c.consistency)
}

func (c *Client) deleter(className string, id strfmt.UUID) *data.Deleter {
	return c.Client.Data().Deleter().
		WithClassName(className).
		WithID(id.String()).
		WithTenant(c.tenant).
		WithConsistencyLevel(c.consistency)
}

func (c *Client) searcher(className string) *graphql.GetBuilder {
	return c.client.GraphQL().Get().
		WithClassName(className).
		WithTenant(c.tenant)
}

// NewClient creates a new Weaviate client
func NewClient(host, scheme string) (*Client, error) {
	cfg := weaviate.Config{
		Host:   host,
		Scheme: scheme,
	}
	
	client, err := weaviate.NewClient(cfg)
	if err != nil {
		return nil, err
	}
	
	return &Client{
		client: client,
	}, nil
}

// GetClient returns the underlying Weaviate client
func (c *Client) GetClient() *weaviate.Client {
	return c.client
}